//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace GithubDisplay
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace GithubDisplay.GithubDisplay_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[34];
            _typeNameTable[0] = "GithubDisplay.Converters.BoolToVisibilityConverter";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "GithubDisplay.Converters.InvBoolToVisibilityConverter";
            _typeNameTable[3] = "GithubDisplay.Converters.InvBoolConverter";
            _typeNameTable[4] = "GithubDisplay.Converters.NotEmptyStringToVisibilityConverter";
            _typeNameTable[5] = "Microsoft.Xaml.Interactivity.Interaction";
            _typeNameTable[6] = "Microsoft.Xaml.Interactivity.BehaviorCollection";
            _typeNameTable[7] = "Windows.UI.Xaml.DependencyObjectCollection";
            _typeNameTable[8] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[9] = "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Blur";
            _typeNameTable[10] = "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.FrameworkElement>";
            _typeNameTable[11] = "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.BehaviorBase`1<Windows.UI.Xaml.FrameworkElement>";
            _typeNameTable[12] = "Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.FrameworkElement>";
            _typeNameTable[13] = "Microsoft.Xaml.Interactivity.Behavior";
            _typeNameTable[14] = "Double";
            _typeNameTable[15] = "Boolean";
            _typeNameTable[16] = "Windows.UI.Xaml.FrameworkElement";
            _typeNameTable[17] = "GithubDisplay.MainPage";
            _typeNameTable[18] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[19] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[20] = "GithubDisplay.Services.Tracker`1<GithubDisplay.Models.PullRequest>";
            _typeNameTable[21] = "System.Collections.Generic.IList`1<GithubDisplay.Models.PullRequest>";
            _typeNameTable[22] = "GithubDisplay.Models.PullRequest";
            _typeNameTable[23] = "String";
            _typeNameTable[24] = "Int32";
            _typeNameTable[25] = "GithubDisplay.Models.PullRequest.LabelState";
            _typeNameTable[26] = "System.Enum";
            _typeNameTable[27] = "System.ValueType";
            _typeNameTable[28] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[29] = "GithubDisplay.Models.PRState";
            _typeNameTable[30] = "Octokit.User";
            _typeNameTable[31] = "Octokit.Account";
            _typeNameTable[32] = "GithubDisplay.SettingsPage";
            _typeNameTable[33] = "System.Collections.Generic.List`1<String>";

            _typeTable = new global::System.Type[34];
            _typeTable[0] = typeof(global::GithubDisplay.Converters.BoolToVisibilityConverter);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::GithubDisplay.Converters.InvBoolToVisibilityConverter);
            _typeTable[3] = typeof(global::GithubDisplay.Converters.InvBoolConverter);
            _typeTable[4] = typeof(global::GithubDisplay.Converters.NotEmptyStringToVisibilityConverter);
            _typeTable[5] = typeof(global::Microsoft.Xaml.Interactivity.Interaction);
            _typeTable[6] = typeof(global::Microsoft.Xaml.Interactivity.BehaviorCollection);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.DependencyObjectCollection);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[9] = typeof(global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Blur);
            _typeTable[10] = typeof(global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.FrameworkElement>);
            _typeTable[11] = typeof(global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.BehaviorBase<global::Windows.UI.Xaml.FrameworkElement>);
            _typeTable[12] = typeof(global::Microsoft.Xaml.Interactivity.Behavior<global::Windows.UI.Xaml.FrameworkElement>);
            _typeTable[13] = typeof(global::Microsoft.Xaml.Interactivity.Behavior);
            _typeTable[14] = typeof(global::System.Double);
            _typeTable[15] = typeof(global::System.Boolean);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.FrameworkElement);
            _typeTable[17] = typeof(global::GithubDisplay.MainPage);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[20] = typeof(global::GithubDisplay.Services.Tracker<global::GithubDisplay.Models.PullRequest>);
            _typeTable[21] = typeof(global::System.Collections.Generic.IList<global::GithubDisplay.Models.PullRequest>);
            _typeTable[22] = typeof(global::GithubDisplay.Models.PullRequest);
            _typeTable[23] = typeof(global::System.String);
            _typeTable[24] = typeof(global::System.Int32);
            _typeTable[25] = typeof(global::GithubDisplay.Models.PullRequest.LabelState);
            _typeTable[26] = typeof(global::System.Enum);
            _typeTable[27] = typeof(global::System.ValueType);
            _typeTable[28] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[29] = typeof(global::GithubDisplay.Models.PRState);
            _typeTable[30] = typeof(global::Octokit.User);
            _typeTable[31] = typeof(global::Octokit.Account);
            _typeTable[32] = typeof(global::GithubDisplay.SettingsPage);
            _typeTable[33] = typeof(global::System.Collections.Generic.List<global::System.String>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_BoolToVisibilityConverter() { return new global::GithubDisplay.Converters.BoolToVisibilityConverter(); }
        private object Activate_2_InvBoolToVisibilityConverter() { return new global::GithubDisplay.Converters.InvBoolToVisibilityConverter(); }
        private object Activate_3_InvBoolConverter() { return new global::GithubDisplay.Converters.InvBoolConverter(); }
        private object Activate_4_NotEmptyStringToVisibilityConverter() { return new global::GithubDisplay.Converters.NotEmptyStringToVisibilityConverter(); }
        private object Activate_6_BehaviorCollection() { return new global::Microsoft.Xaml.Interactivity.BehaviorCollection(); }
        private object Activate_9_Blur() { return new global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Blur(); }
        private object Activate_17_MainPage() { return new global::GithubDisplay.MainPage(); }
        private object Activate_20_Tracker() { return new global::GithubDisplay.Services.Tracker<global::GithubDisplay.Models.PullRequest>(); }
        private object Activate_22_PullRequest() { return new global::GithubDisplay.Models.PullRequest(); }
        private object Activate_30_User() { return new global::Octokit.User(); }
        private object Activate_32_SettingsPage() { return new global::GithubDisplay.SettingsPage(); }
        private object Activate_33_List() { return new global::System.Collections.Generic.List<global::System.String>(); }
        private void VectorAdd_6_BehaviorCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GithubDisplay.Models.PullRequest>)instance;
            var newItem = (global::GithubDisplay.Models.PullRequest)item;
            collection.Add(newItem);
        }
        private void VectorAdd_33_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  GithubDisplay.Converters.BoolToVisibilityConverter
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_BoolToVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  GithubDisplay.Converters.InvBoolToVisibilityConverter
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_InvBoolToVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  GithubDisplay.Converters.InvBoolConverter
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_InvBoolConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  GithubDisplay.Converters.NotEmptyStringToVisibilityConverter
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_NotEmptyStringToVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  Microsoft.Xaml.Interactivity.Interaction
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Behaviors");
                xamlType = userType;
                break;

            case 6:   //  Microsoft.Xaml.Interactivity.BehaviorCollection
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObjectCollection"));
                userType.CollectionAdd = VectorAdd_6_BehaviorCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  Windows.UI.Xaml.DependencyObjectCollection
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Blur
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.FrameworkElement>"));
                userType.Activator = Activate_9_Blur;
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 10:   //  Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.FrameworkElement>
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.BehaviorBase`1<Windows.UI.Xaml.FrameworkElement>"));
                userType.AddMemberName("Duration");
                userType.AddMemberName("Delay");
                userType.AddMemberName("AutomaticallyStart");
                xamlType = userType;
                break;

            case 11:   //  Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.BehaviorBase`1<Windows.UI.Xaml.FrameworkElement>
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.FrameworkElement>"));
                xamlType = userType;
                break;

            case 12:   //  Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.FrameworkElement>
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior"));
                userType.AddMemberName("AssociatedObject");
                xamlType = userType;
                break;

            case 13:   //  Microsoft.Xaml.Interactivity.Behavior
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case 14:   //  Double
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Boolean
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Windows.UI.Xaml.FrameworkElement
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  GithubDisplay.MainPage
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_MainPage;
                userType.AddMemberName("PullRequests");
                userType.AddMemberName("PRsCodeReview");
                userType.AddMemberName("PRsTesting");
                userType.AddMemberName("PRsDone");
                userType.AddMemberName("MaxOpenPRs");
                userType.AddMemberName("HasHitMaxPRs");
                userType.AddMemberName("IsOnXbox");
                userType.AddMemberName("IsBusy");
                userType.AddMemberName("CurrentUser");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  GithubDisplay.Services.Tracker`1<GithubDisplay.Models.PullRequest>
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  System.Collections.Generic.IList`1<GithubDisplay.Models.PullRequest>
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_21_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  GithubDisplay.Models.PullRequest
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_PullRequest;
                userType.AddMemberName("Name");
                userType.AddMemberName("Number");
                userType.AddMemberName("AssigneeName");
                userType.AddMemberName("IsReadyForReview");
                userType.AddMemberName("IsReviewed");
                userType.AddMemberName("IsBlocked");
                userType.AddMemberName("TestingState");
                userType.AddMemberName("UXReviewState");
                userType.AddMemberName("Mergable");
                userType.AddMemberName("HasChangeRequests");
                userType.AddMemberName("NumberOfApproved");
                userType.AddMemberName("DesiredNumberOfApproved");
                userType.AddMemberName("IsFailedTesting");
                userType.AddMemberName("StatusBrush");
                userType.AddMemberName("ErrorStatus");
                userType.AddMemberName("CodeReviewStatus");
                userType.AddMemberName("State");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  String
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Int32
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  GithubDisplay.Models.PullRequest.LabelState
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::GithubDisplay.Models.PullRequest.LabelState.None);
                userType.AddEnumValue("Needed", global::GithubDisplay.Models.PullRequest.LabelState.Needed);
                userType.AddEnumValue("Passed", global::GithubDisplay.Models.PullRequest.LabelState.Passed);
                userType.AddEnumValue("Failed", global::GithubDisplay.Models.PullRequest.LabelState.Failed);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  System.Enum
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 27:   //  System.ValueType
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 28:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  GithubDisplay.Models.PRState
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::GithubDisplay.Models.PRState.None);
                userType.AddEnumValue("CodeReview", global::GithubDisplay.Models.PRState.CodeReview);
                userType.AddEnumValue("Testing", global::GithubDisplay.Models.PRState.Testing);
                userType.AddEnumValue("Done", global::GithubDisplay.Models.PRState.Done);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Octokit.User
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Octokit.Account"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 31:   //  Octokit.Account
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 32:   //  GithubDisplay.SettingsPage
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_SettingsPage;
                userType.AddMemberName("IsOnXbox");
                userType.AddMemberName("BackgroundItems");
                userType.AddMemberName("SelectedValue");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  System.Collections.Generic.List`1<String>
                userType = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_33_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_Interaction_Behaviors(object instance)
        {
            return global::Microsoft.Xaml.Interactivity.Interaction.GetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_0_Interaction_Behaviors(object instance, object Value)
        {
            global::Microsoft.Xaml.Interactivity.Interaction.SetBehaviors((global::Windows.UI.Xaml.DependencyObject)instance, (global::Microsoft.Xaml.Interactivity.BehaviorCollection)Value);
        }
        private object get_1_Blur_Value(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Blur)instance;
            return that.Value;
        }
        private void set_1_Blur_Value(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Blur)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_2_CompositionBehaviorBase_Duration(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.FrameworkElement>)instance;
            return that.Duration;
        }
        private void set_2_CompositionBehaviorBase_Duration(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.FrameworkElement>)instance;
            that.Duration = (global::System.Double)Value;
        }
        private object get_3_CompositionBehaviorBase_Delay(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.FrameworkElement>)instance;
            return that.Delay;
        }
        private void set_3_CompositionBehaviorBase_Delay(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.FrameworkElement>)instance;
            that.Delay = (global::System.Double)Value;
        }
        private object get_4_CompositionBehaviorBase_AutomaticallyStart(object instance)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.FrameworkElement>)instance;
            return that.AutomaticallyStart;
        }
        private void set_4_CompositionBehaviorBase_AutomaticallyStart(object instance, object Value)
        {
            var that = (global::Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase<global::Windows.UI.Xaml.FrameworkElement>)instance;
            that.AutomaticallyStart = (global::System.Boolean)Value;
        }
        private object get_5_Behavior_AssociatedObject(object instance)
        {
            var that = (global::Microsoft.Xaml.Interactivity.Behavior<global::Windows.UI.Xaml.FrameworkElement>)instance;
            return that.AssociatedObject;
        }
        private object get_6_MainPage_PullRequests(object instance)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            return that.PullRequests;
        }
        private void set_6_MainPage_PullRequests(object instance, object Value)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            that.PullRequests = (global::GithubDisplay.Services.Tracker<global::GithubDisplay.Models.PullRequest>)Value;
        }
        private object get_7_MainPage_PRsCodeReview(object instance)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            return that.PRsCodeReview;
        }
        private object get_8_PullRequest_Name(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.Name;
        }
        private void set_8_PullRequest_Name(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_9_PullRequest_Number(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.Number;
        }
        private void set_9_PullRequest_Number(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.Number = (global::System.Int32)Value;
        }
        private object get_10_PullRequest_AssigneeName(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.AssigneeName;
        }
        private void set_10_PullRequest_AssigneeName(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.AssigneeName = (global::System.String)Value;
        }
        private object get_11_PullRequest_IsReadyForReview(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.IsReadyForReview;
        }
        private void set_11_PullRequest_IsReadyForReview(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.IsReadyForReview = (global::System.Boolean)Value;
        }
        private object get_12_PullRequest_IsReviewed(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.IsReviewed;
        }
        private void set_12_PullRequest_IsReviewed(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.IsReviewed = (global::System.Boolean)Value;
        }
        private object get_13_PullRequest_IsBlocked(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.IsBlocked;
        }
        private void set_13_PullRequest_IsBlocked(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.IsBlocked = (global::System.Boolean)Value;
        }
        private object get_14_PullRequest_TestingState(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.TestingState;
        }
        private void set_14_PullRequest_TestingState(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.TestingState = (global::GithubDisplay.Models.PullRequest.LabelState)Value;
        }
        private object get_15_PullRequest_UXReviewState(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.UXReviewState;
        }
        private void set_15_PullRequest_UXReviewState(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.UXReviewState = (global::GithubDisplay.Models.PullRequest.LabelState)Value;
        }
        private object get_16_PullRequest_Mergable(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.Mergable;
        }
        private void set_16_PullRequest_Mergable(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.Mergable = (global::System.Boolean)Value;
        }
        private object get_17_PullRequest_HasChangeRequests(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.HasChangeRequests;
        }
        private void set_17_PullRequest_HasChangeRequests(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.HasChangeRequests = (global::System.Boolean)Value;
        }
        private object get_18_PullRequest_NumberOfApproved(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.NumberOfApproved;
        }
        private void set_18_PullRequest_NumberOfApproved(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.NumberOfApproved = (global::System.Int32)Value;
        }
        private object get_19_PullRequest_DesiredNumberOfApproved(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.DesiredNumberOfApproved;
        }
        private void set_19_PullRequest_DesiredNumberOfApproved(object instance, object Value)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            that.DesiredNumberOfApproved = (global::System.Int32)Value;
        }
        private object get_20_PullRequest_IsFailedTesting(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.IsFailedTesting;
        }
        private object get_21_PullRequest_StatusBrush(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.StatusBrush;
        }
        private object get_22_PullRequest_ErrorStatus(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.ErrorStatus;
        }
        private object get_23_PullRequest_CodeReviewStatus(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.CodeReviewStatus;
        }
        private object get_24_PullRequest_State(object instance)
        {
            var that = (global::GithubDisplay.Models.PullRequest)instance;
            return that.State;
        }
        private object get_25_MainPage_PRsTesting(object instance)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            return that.PRsTesting;
        }
        private object get_26_MainPage_PRsDone(object instance)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            return that.PRsDone;
        }
        private object get_27_MainPage_MaxOpenPRs(object instance)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            return that.MaxOpenPRs;
        }
        private object get_28_MainPage_HasHitMaxPRs(object instance)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            return that.HasHitMaxPRs;
        }
        private object get_29_MainPage_IsOnXbox(object instance)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            return that.IsOnXbox;
        }
        private object get_30_MainPage_IsBusy(object instance)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            return that.IsBusy;
        }
        private void set_30_MainPage_IsBusy(object instance, object Value)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            that.IsBusy = (global::System.Boolean)Value;
        }
        private object get_31_MainPage_CurrentUser(object instance)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            return that.CurrentUser;
        }
        private void set_31_MainPage_CurrentUser(object instance, object Value)
        {
            var that = (global::GithubDisplay.MainPage)instance;
            that.CurrentUser = (global::Octokit.User)Value;
        }
        private object get_32_SettingsPage_IsOnXbox(object instance)
        {
            var that = (global::GithubDisplay.SettingsPage)instance;
            return that.IsOnXbox;
        }
        private object get_33_SettingsPage_BackgroundItems(object instance)
        {
            var that = (global::GithubDisplay.SettingsPage)instance;
            return that.BackgroundItems;
        }
        private void set_33_SettingsPage_BackgroundItems(object instance, object Value)
        {
            var that = (global::GithubDisplay.SettingsPage)instance;
            that.BackgroundItems = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_34_SettingsPage_SelectedValue(object instance)
        {
            var that = (global::GithubDisplay.SettingsPage)instance;
            return that.SelectedValue;
        }
        private void set_34_SettingsPage_SelectedValue(object instance, object Value)
        {
            var that = (global::GithubDisplay.SettingsPage)instance;
            that.SelectedValue = (global::System.String)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember xamlMember = null;
            global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.Xaml.Interactivity.Interaction.Behaviors":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Interaction");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "Behaviors", "Microsoft.Xaml.Interactivity.BehaviorCollection");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_0_Interaction_Behaviors;
                xamlMember.Setter = set_0_Interaction_Behaviors;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Blur.Value":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.Blur");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_Blur_Value;
                xamlMember.Setter = set_1_Blur_Value;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.FrameworkElement>.Duration":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.FrameworkElement>");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "Duration", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_CompositionBehaviorBase_Duration;
                xamlMember.Setter = set_2_CompositionBehaviorBase_Duration;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.FrameworkElement>.Delay":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.FrameworkElement>");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "Delay", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_CompositionBehaviorBase_Delay;
                xamlMember.Setter = set_3_CompositionBehaviorBase_Delay;
                break;
            case "Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.FrameworkElement>.AutomaticallyStart":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Toolkit.Uwp.UI.Animations.Behaviors.CompositionBehaviorBase`1<Windows.UI.Xaml.FrameworkElement>");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "AutomaticallyStart", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_CompositionBehaviorBase_AutomaticallyStart;
                xamlMember.Setter = set_4_CompositionBehaviorBase_AutomaticallyStart;
                break;
            case "Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.FrameworkElement>.AssociatedObject":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.Xaml.Interactivity.Behavior`1<Windows.UI.Xaml.FrameworkElement>");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "AssociatedObject", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_5_Behavior_AssociatedObject;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.MainPage.PullRequests":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.MainPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "PullRequests", "GithubDisplay.Services.Tracker`1<GithubDisplay.Models.PullRequest>");
                xamlMember.Getter = get_6_MainPage_PullRequests;
                xamlMember.Setter = set_6_MainPage_PullRequests;
                break;
            case "GithubDisplay.MainPage.PRsCodeReview":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.MainPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "PRsCodeReview", "System.Collections.Generic.IList`1<GithubDisplay.Models.PullRequest>");
                xamlMember.Getter = get_7_MainPage_PRsCodeReview;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.Models.PullRequest.Name":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_8_PullRequest_Name;
                xamlMember.Setter = set_8_PullRequest_Name;
                break;
            case "GithubDisplay.Models.PullRequest.Number":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "Number", "Int32");
                xamlMember.Getter = get_9_PullRequest_Number;
                xamlMember.Setter = set_9_PullRequest_Number;
                break;
            case "GithubDisplay.Models.PullRequest.AssigneeName":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "AssigneeName", "String");
                xamlMember.Getter = get_10_PullRequest_AssigneeName;
                xamlMember.Setter = set_10_PullRequest_AssigneeName;
                break;
            case "GithubDisplay.Models.PullRequest.IsReadyForReview":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "IsReadyForReview", "Boolean");
                xamlMember.Getter = get_11_PullRequest_IsReadyForReview;
                xamlMember.Setter = set_11_PullRequest_IsReadyForReview;
                break;
            case "GithubDisplay.Models.PullRequest.IsReviewed":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "IsReviewed", "Boolean");
                xamlMember.Getter = get_12_PullRequest_IsReviewed;
                xamlMember.Setter = set_12_PullRequest_IsReviewed;
                break;
            case "GithubDisplay.Models.PullRequest.IsBlocked":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "IsBlocked", "Boolean");
                xamlMember.Getter = get_13_PullRequest_IsBlocked;
                xamlMember.Setter = set_13_PullRequest_IsBlocked;
                break;
            case "GithubDisplay.Models.PullRequest.TestingState":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "TestingState", "GithubDisplay.Models.PullRequest.LabelState");
                xamlMember.Getter = get_14_PullRequest_TestingState;
                xamlMember.Setter = set_14_PullRequest_TestingState;
                break;
            case "GithubDisplay.Models.PullRequest.UXReviewState":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "UXReviewState", "GithubDisplay.Models.PullRequest.LabelState");
                xamlMember.Getter = get_15_PullRequest_UXReviewState;
                xamlMember.Setter = set_15_PullRequest_UXReviewState;
                break;
            case "GithubDisplay.Models.PullRequest.Mergable":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "Mergable", "Boolean");
                xamlMember.Getter = get_16_PullRequest_Mergable;
                xamlMember.Setter = set_16_PullRequest_Mergable;
                break;
            case "GithubDisplay.Models.PullRequest.HasChangeRequests":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "HasChangeRequests", "Boolean");
                xamlMember.Getter = get_17_PullRequest_HasChangeRequests;
                xamlMember.Setter = set_17_PullRequest_HasChangeRequests;
                break;
            case "GithubDisplay.Models.PullRequest.NumberOfApproved":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "NumberOfApproved", "Int32");
                xamlMember.Getter = get_18_PullRequest_NumberOfApproved;
                xamlMember.Setter = set_18_PullRequest_NumberOfApproved;
                break;
            case "GithubDisplay.Models.PullRequest.DesiredNumberOfApproved":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "DesiredNumberOfApproved", "Int32");
                xamlMember.Getter = get_19_PullRequest_DesiredNumberOfApproved;
                xamlMember.Setter = set_19_PullRequest_DesiredNumberOfApproved;
                break;
            case "GithubDisplay.Models.PullRequest.IsFailedTesting":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "IsFailedTesting", "Boolean");
                xamlMember.Getter = get_20_PullRequest_IsFailedTesting;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.Models.PullRequest.StatusBrush":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "StatusBrush", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.Getter = get_21_PullRequest_StatusBrush;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.Models.PullRequest.ErrorStatus":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "ErrorStatus", "String");
                xamlMember.Getter = get_22_PullRequest_ErrorStatus;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.Models.PullRequest.CodeReviewStatus":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "CodeReviewStatus", "String");
                xamlMember.Getter = get_23_PullRequest_CodeReviewStatus;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.Models.PullRequest.State":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.Models.PullRequest");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "State", "GithubDisplay.Models.PRState");
                xamlMember.Getter = get_24_PullRequest_State;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.MainPage.PRsTesting":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.MainPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "PRsTesting", "System.Collections.Generic.IList`1<GithubDisplay.Models.PullRequest>");
                xamlMember.Getter = get_25_MainPage_PRsTesting;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.MainPage.PRsDone":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.MainPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "PRsDone", "System.Collections.Generic.IList`1<GithubDisplay.Models.PullRequest>");
                xamlMember.Getter = get_26_MainPage_PRsDone;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.MainPage.MaxOpenPRs":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.MainPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "MaxOpenPRs", "Int32");
                xamlMember.Getter = get_27_MainPage_MaxOpenPRs;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.MainPage.HasHitMaxPRs":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.MainPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "HasHitMaxPRs", "Boolean");
                xamlMember.Getter = get_28_MainPage_HasHitMaxPRs;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.MainPage.IsOnXbox":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.MainPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "IsOnXbox", "Boolean");
                xamlMember.Getter = get_29_MainPage_IsOnXbox;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.MainPage.IsBusy":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.MainPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "IsBusy", "Boolean");
                xamlMember.Getter = get_30_MainPage_IsBusy;
                xamlMember.Setter = set_30_MainPage_IsBusy;
                break;
            case "GithubDisplay.MainPage.CurrentUser":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.MainPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "CurrentUser", "Octokit.User");
                xamlMember.Getter = get_31_MainPage_CurrentUser;
                xamlMember.Setter = set_31_MainPage_CurrentUser;
                break;
            case "GithubDisplay.SettingsPage.IsOnXbox":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.SettingsPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "IsOnXbox", "Boolean");
                xamlMember.Getter = get_32_SettingsPage_IsOnXbox;
                xamlMember.SetIsReadOnly();
                break;
            case "GithubDisplay.SettingsPage.BackgroundItems":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.SettingsPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "BackgroundItems", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_33_SettingsPage_BackgroundItems;
                xamlMember.Setter = set_33_SettingsPage_BackgroundItems;
                break;
            case "GithubDisplay.SettingsPage.SelectedValue":
                userType = (global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GithubDisplay.SettingsPage");
                xamlMember = new global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlMember(this, "SelectedValue", "String");
                xamlMember.Getter = get_34_SettingsPage_SelectedValue;
                xamlMember.Setter = set_34_SettingsPage_SelectedValue;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlSystemBaseType
    {
        global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::GithubDisplay.GithubDisplay_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

